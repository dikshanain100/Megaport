Check this video :
https://www.youtube.com/watch?v=5YtNQJQu31Y
https://angular.io/guide/service-worker-getting-started
check this eg : https://developer.okta.com/blog/2019/01/30/first-angular-pwa
Theory of it : https://medium.com/nerd-for-tech/angular-offline-capability-service-worker-and-pwa-12b94ebbb141
Small login for offline caching : https://www.youtube.com/watch?v=O1qyeufaSo4
Index DB Video : https://www.youtube.com/playlist?list=PL4cSPhAvl8xUHh6ojmhFDGdMQmJWFcxrc   (IMMMPTTT)

1) ngsw-worker.js file name present inside app.module >> you won't see this file in your project as this file is automatically generated once you run your application
in prod mode. This is used for caching data.
When you build you application in prod mode and check dist folder, you will see this file there with lots of code.
===============================================================================================================================================================

2) Some files get changed 
>>index.html
>>package.json
>>angular/module
you can check other files at official document : https://angular.io/guide/service-worker-getting-started

===============================================================================================================================================================

3) To run you application for PWA 

Need to run in prod environment
>> ng build --prod  
>>go inside dist folder and then http-server -p 8081

Now you can paly with service worker inside Apllication tab .
you will see worker name as : ngsw-worker.js  and ngsw.json  

Note : Make sure you clear all the storage /cache before you start working with your application.
Also, sometimes, you will see that even if you offline your application, req is still going through. You may need to completely off your wifi.
Static content will always be loaded because it's loaded in memory.
Even if you off wifi, amy not get no network error coz of service worker.

Next, reload your page 2 times everytime you restarts your application, coz service-worker fetches data from old-version for the first time.
>>first load --- load service worker
  second load - caches API response in serviec worker
>> it's because of ngsw-config.json file, as assest data is prefetched whenever your application is loaded. (for static)
you can lazy be loaded. Downside, if your losses the connection before he visits the page, he will never be able to see the content.
===============================================================================================================================================================
4) How does this works ::
https://www.youtube.com/watch?v=5YtNQJQu31Y

Two thread run in parallel :
1) one is js single main thread
2) Service worker 

So, when you go offline, the response is served through service-worker.

===============================================================================================================================================================
5) TO completely check application :

>> switch off your wifi 
>> you will see only satic data
>> to see dynamic data, change ngsw-config.json file
>> you can load every css and js file apart from index.html and favicon.ico (check video at 17:30) IMPTTT
>> you can include any external font you have as well by using param name : "urls"
>> your apllication must be loaded atleast once in memory for service-worker to work offline
>>"datagRoup" .. used for your dynamic data i.e services   OR other way is storing data in browser (what we did in Quest Global) 
The timeout and stratergy properties mentioned here can be put inside app.module as well.


=============================================================================================================================================================
6) Service Worker IMPT Pre-requesite.

>>In order for service workers to be registered, the application must be accessed over HTTPS, not HTTP. 
Browsers ignore service workers on pages that are served over an insecure connection.
The reason is that service workers are quite powerful, so extra care needs to be taken to ensure the service worker script has not been tampered with.

There is one exception to this rule: to make local development easier, browsers do not require a secure connection when accessing an application on localhost.

Hence, inside app.module you will see a line for enbleProd Mode i.e it is enabled for prod mode 

==========================================================================================================================================================
7) Service worker -- Local Storage 

https://stackoverflow.com/questions/56702491/angular-pwa-offline-storage

I have the service worker working perfectly and driven by the manifest file, this very nicely caches the static content and I’ve set it to cache a bunch of 
API requests which I want to use whilst the application is offline.
use localStorage to store attempts to invoke put, post and delete API requests when the user is offline. Once the internet connection is re-established, 
the requests stored in localStorage are sent to the server.


Refre this stackoverflow doubt :  vvvimpt :https://stackoverflow.com/questions/56702491/angular-pwa-offline-storage

==========================================================================================================================================================
8) Which is better Index DB or local Storage or Web Sql?

https://assafweinberg.medium.com/offline-data-in-the-browser-6ac7349c6eb

Local Storage :
Fast
Synch
But storage of only 5 MB
kind of deprecated

Index DB :
New
Data size is technically unlimited, though some vendors will ask users for permission if you cross the 50mb point.
IDB introduces transactions, auto-incrementing keys, and database schema versioning.
Unfortunately, with all these powerful features, IDB also brings with it a lot of complexity. The API is asynchronous and all based on transactions. 
We’d have to define a store and save an object to it asynchronously using event listeners.
Performance also isn’t really one of its strong suits. LocalStorage by comparison is over 20x faster. 


Web SQL :
Deprecated
WebSQL is a deprecated/retired working draft of a technology meant to solve the same problems as IndexedDB, but in a more relational way. It is still 
supported in Chrome, Safari, and Opera and some mobile browsers, but Firefox and IE have no love for it. 


Another SOl : 
there are slibs used on top these storage. like Pouch DB 
PouchDB is a JavaScript implementation of the CouchDB NoSQL database. It lets you easily create new databases, save documents, and query documents. Depending 
on the storage adapter you specify, databases are automatically saved to your persistence store of choice — IndexDB, LocalStorage, Memory… and yes, even WebSQL.


LokiJS:
Loki is an in-memory object database with an API inspired by MongoDB. All operations are synchronous, which makes for very readable code. Creating collections 
and inserting data is very straight forward.
==========================================================================================================================================================
9) PWA App Install 

So if you are using your application for the first time , on the browser (top-right side) , you will get an + icon to install the app.
It's because of PWA i.e your web application behaves as a native app.
this will be added to ur app screen so that next time user doesn't need to browser the url . can directly access it via screen .
==========================================================================================================================================================
10) ngsw-config.json

>> installMode : "prefetch" means that it will first fetch the response from service worker and then give it to UI
installMode : "lazy" means first main thread processing is done and then service worker comes into picture. (opp of prefetch). it is faster if have lots of file. 
Demirit is if internet connection goes out before you have visited that page, next time u visit that page offline, u won't get anyhting bcz 
there is nothing in cache

you can include any external font you have as well by using param name : "urls"

Caching API calls::
you need to create "dataGroups" inside this file
eg :
"dataGroups": [
    {
      "name": "api-call",
      "urls": ["http://dummy.restapiexample.com/api/v1/*"],    >> i.e whatever that comes after v1 will be cached or you can mention indvidual url as well 
      "cacheConfig": {    >> tells when to access service worker and when to access normal apis
        "maxAge": "12h", >>>max age of cache
        "maxSize": 10,  >>>how many reqs u want to cache (no of urls u r calling and not no of results)
        "strategy": "freshness",
        "timeout": "5s"  >>wait fro 5 sec then call cache
      }
    }
  ]
  
  
    "strategy": "freshness",
	  "strategy": "performance", >>>focus on performance i.e it will fetch from cache. it will check maxAge , if it's within range, it will fetch from the cache 
	  else get data from the server
	  but if you go for freshness , it checks the timeout i.e 5 sec ..it waits for 5 sec for server to respond. if doesn't get anything, then hits the
	  server to get the data.
	  
	  But this is valid only if we don't have internet connection else API is alays called
==========================================================================================================================================================
11) SwUpdate

>>The SwUpdate service gives you access to events that indicate when the service worker has discovered an available update for your app and you can ask 
the user to update the same. That is, if there is any update/ new data available at the server, this will help in updating the cache as well.

IMPT you watch this video :https://www.youtube.com/watch?v=TI3s1--45h0&list=PL4cSPhAvl8xUHh6ojmhFDGdMQmJWFcxrc&index=3

SwUpdate has 3 properties:
1) isEnabled :: if service worker is enabled or not
2) isAvailable ::: if update is available or not
3) isActivated ::if update is available and activated i.e service worker is updated or not (changes pushed tos ervice worker)

updateClient() {
    if (!this.update.isEnabled) {
      console.log('Not Enabled');
      return;
    }
    this.update.available.subscribe((event) => {
      console.log(`current`, event.current, `available `, event.available);
      if (confirm('update available for the app please conform')) {
        this.update.activateUpdate().then(() => location.reload());    >>>so that one reload is already done 
      }
    });

    this.update.activated.subscribe((event) => {
      console.log(`current`, event.previous, `available `, event.current);
    });
  }
  
  
  We have to refresh 2 times (not multiple i.e before this code had to refresh multiple times)
  
  
Note : 
1) don't use it if you don't have updates within a day.
2) don't call this inside your app component/main component coz it will prevent your service-register to be registered in the browser. SW registers only when your
application is stable.

To check if your application is stable :

checkUpdate() {
    this.appRef.isStable.subscribe((isStable) => {
      if (isStable) {
        const timeInterval = interval(8 * 60 * 60 * 1000);   >>> 8 hr time gap before calling server for update 

        timeInterval.subscribe(() => {
          this.update.checkForUpdate().then(() => console.log('checked'));
          console.log('update checked');
        });
      }
    });
  }
  
  
Therefore better way of doing it 
==========================================================================================================================================================
12) Once you develop your website, you need to publish it somewhere.

>> you can't put it on appstore or playstore coz that might chare you somehting.
But you can use : progressiveapp.store/profile

https://www.youtube.com/watch?v=0vSEmEdYKro&list=PL4cSPhAvl8xUHh6ojmhFDGdMQmJWFcxrc&index=4    
4:00 


==========================================================================================================================================================


==========================================================================================================================================================